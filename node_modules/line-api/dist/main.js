'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _validateArguments = require('validate-arguments');

var _validateArguments2 = _interopRequireDefault(_validateArguments);

var _config = require('../config/config.json');

var _config2 = _interopRequireDefault(_config);

var _sticker = require('../config/sticker.json');

var _sticker2 = _interopRequireDefault(_sticker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Notify = function () {
	function Notify(_ref) {
		var token = _ref.token;

		_classCallCheck(this, Notify);

		if (!token) {
			throw new Error('Please initialize with {token} argument.');
		}
		this.token = token;
		this.ratelimit = {
			request: {
				limit: null,
				remaining: null
			},
			image: {
				limit: null,
				remaining: null
			},
			reset: null
		};
	}

	_createClass(Notify, [{
		key: 'req',
		value: function req(args) {
			var _this = this;

			return new Promise(function (resolve, reject) {
				var validation = _validateArguments2.default.named(args, {
					endpoint: 'string',
					formData: {
						isa: 'plainObject',
						optional: true
					}
				});
				var endpoint = validation.get('endpoint');
				var formData = validation.get('formData');
				var method = endpoint == 'status' ? 'get' : 'post';
				var headers = { Authorization: 'Bearer ' + _this.token };
				if (method == 'post') headers['Content-Type'] = 'multipart/form-data';
				(0, _requestPromise2.default)(Object.assign({ method: method, headers: headers, url: _config2.default.ENDPOINT_URL_NOTIFY[endpoint], resolveWithFullResponse: true }, formData ? { formData: formData } : {})).then(function (res) {
					var header = res.headers;
					var body = res.body;
					_this.ratelimit = {
						request: {
							limit: parseInt(header['x-ratelimit-limit']),
							remain: parseInt(header['x-ratelimit-remaining'])
						},
						image: {
							limit: parseInt(header['x-ratelimit-imagelimit']),
							remain: parseInt(header['x-ratelimit-imageremaining'])
						},
						reset: new Date(parseInt(header['x-ratelimit-reset']) * 1000)
					};
					resolve(JSON.parse(body));
				}).catch(function (err) {
					reject(JSON.parse(err.error));
				});
			});
		}
	}, {
		key: 'status',
		value: function status() {
			return this.req({ endpoint: 'status' });
		}
	}, {
		key: 'revoke',
		value: function revoke() {
			return this.req({ endpoint: 'revoke' });
		}
	}, {
		key: 'send',
		value: function send(args) {
			var _this2 = this;

			return Promise.resolve().then(function () {

				var validation = _validateArguments2.default.named(args, {
					message: 'string'
				});

				if (!validation.isValid()) {
					throw new Error(validation.errorString());
				}

				var message = validation.get('message');
				var sticker = validation.get('sticker');
				var image = validation.get('image');
				var formData = { message: message };

				if (sticker) {
					if (typeof sticker == 'string') {
						if (Object.keys(_sticker2.default).includes(sticker)) {
							var _ref2 = [_sticker2.default[sticker].packageId, _sticker2.default[sticker].id];
							formData.stickerPackageId = _ref2[0];
							formData.stickerId = _ref2[1];
						}
					}
					if ((typeof sticker === 'undefined' ? 'undefined' : _typeof(sticker)) == 'object' && sticker.packageId && sticker.id) {
						var _ref3 = [sticker.packageId, sticker.id];
						formData.stickerPackageId = _ref3[0];
						formData.stickerId = _ref3[1];
					}
				}

				if (image) {
					if (typeof image == 'string') {
						formData.imageFile = _fs2.default.createReadStream(image);
					}
					if ((typeof image === 'undefined' ? 'undefined' : _typeof(image)) == 'object' && image.fullsize && image.thumbnail) {
						var _ref4 = [image.fullsize, image.thumbnail];
						formData.imageFullsize = _ref4[0];
						formData.imageThumbnail = _ref4[1];
					}
				}

				return _this2.req({ endpoint: 'send', formData: formData });
			});
		}
	}]);

	return Notify;
}();

var LineAPI = {
	Notify: Notify
};

exports.default = LineAPI;